#!/usr/bin/env node


exports.for = function (API) {

	var exports = {};

	function formatLogArgs (args) {
		var allStrings = true;
		args.forEach(function (arg) {
			if (!allStrings) return;
			if (typeof arg !== "string") {
				allStrings = false;
			}
		});
		if (allStrings) {
			return args.join(" ");
		}
		return (args.length > 1 ? args : args[0]);
	}

	function log () {
		if (!API.env.VERBOSE) return;
		var args = Array.prototype.slice.call(arguments);
		console.log.call(console, "[sm.sync]", formatLogArgs(args));
	}

	function findPackageRoot (path) {
		path = path.replace(/\/package\.json$/, "");
		return API.QFS.exists(
			API.PATH.join(path, "package.json")
		).then(function (exists) {
			if (exists) {
				return path;
			}
			var newPath = API.PATH.dirname(path);
			if (newPath === path) {
				throw new Error("No package.json found in parent tree!");
			}
			return findPackageRoot(newPath);
		});
	}

	function runCommands (basePath, commands, showProgress) {
		return API.Q.denodeify(function (callback) {
			if (API.VERBOSE) {
				console.log("Run commands:", commands, {
					cwd: basePath
				});
			}
		    var proc = API.SPAWN("bash", [
		        "-s"
		    ], {
		    	cwd: basePath,
		    	env: process.env
		    });
		    proc.on("error", function(err) {
		    	return callback(err);
		    });
		    var stdout = [];
		    var stderr = [];
		    proc.stdout.on('data', function (data) {
		    	stdout.push(data.toString());
		    	if (showProgress) process.stdout.write(data);
		    });
		    proc.stderr.on('data', function (data) {
		    	stderr.push(data.toString());
		    	if (showProgress) process.stdout.write(data);
		    });
		    proc.stdin.write(commands.join("\n"));
		    proc.stdin.end();
		    proc.on('close', function (code) {
		    	if (code) {
		    		var err = new Error("Commands exited with code: " + code);
		    		err.code = code;
		    		err.stdout = stdout;
		    		err.stderr = stderr;
		    		return callback(err);
		    	}
		        return callback(null, stdout.join(""));
		    });
		})();
	}

	function ensurePreconditionsAreMet (packageBasePath) {
		return runCommands(packageBasePath, [
	    	// @source http://stackoverflow.com/a/2658301
	    	'function evil_git_dirty {',
			'  [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && echo "yes"',
			'}',
			'function parse_git_branch {',
			'  git branch --no-color 2> /dev/null | sed -e \'/^[^*]/d\' -e \'s/* \\(.*\\)/\\1/\'',
			'}',
			'echo "branch: $(parse_git_branch)"',
			'echo "dirty: $(evil_git_dirty)"'
		]).then(function (stdout) {
			if (/dirty: yes/.test(stdout)) {
				// TODO: Automatically commit if option is set?
				throw new Error("You must commit all changes in '" + packageBasePath + "' before you can sync the package!");
			}
			return stdout.match(/^branch: (.+)$/m)[1];
		});
	}

	function ensureMappings (packageBasePath, sourcePaths, mappings) {
		return API.Q.all(Object.keys(mappings).map(function (pathAlias) {

			if (!sourcePaths[mappings[pathAlias]]) {
				throw new Error("Mapping '" + mappings[pathAlias] + "' for pathAlias '" + pathAlias + "' not declared in 'sources'!");
			}

			var sourcePath = sourcePaths[mappings[pathAlias]];
			var mappingPath = API.PATH.join(API.PATH.resolve(packageBasePath), pathAlias);

			function ensureMapping () {

				log("Ensure source for alias '" + pathAlias + "' from '" + sourcePath + "' is synced to '" + mappingPath + "'");

				function pullLatest (workingTreePath) {

					return ensurePreconditionsAreMet(workingTreePath).then(function (branch) {

						if (/^\(detached from /.test(branch)) {
							throw new Error("Cannot sync as working tree '" + workingTreePath + "' is detached! Checkout a branch first!");
						}

						return API.GIT_PULL(workingTreePath, {
							branch: branch,
							showProgress: true
						});
					});
				}

				function exportLatest () {

					return API.GIT_EXPORT(sourcePath, mappingPath, {
						showProgress: true
					});
				}

				return API.QFS.exists(API.PATH.join(mappingPath, ".git")).then(function (exists) {
					if (exists) {
						return pullLatest(mappingPath);
					} else {
						return pullLatest(sourcePath).then(function () {
							return exportLatest();
						});
					}
				});
			}

			return ensureMapping();
		}));
	}

	exports.for = function (module) {

		log("CODEBASE", __dirname);
		log("Using BO_GLOBAL_SYSTEM_CACHE_DIR:", API.env.BO_GLOBAL_SYSTEM_CACHE_DIR);

		var origin = API.env.CWD;

		var sync = function () {

			return findPackageRoot(module.filename).then(function (packageBasePath) {

				return API.CONFIG("file://" + packageBasePath + "/package.json").then(function (config) {

					var map = config.descriptor.at("github.com~sourcemint~sm.sync~0/map");

					delete map.mappings;

					return API.SM_EXPAND({
						"github.com~sourcemint~sm.expand~0/map": map
					}).then(function (info) {

						var map = config.descriptor.at("github.com~sourcemint~sm.sync~0/map");
						return ensureMappings(
							packageBasePath,
							info.sourcePaths,
							map.mappings
						);
					});

				}).then(function () {
					return {
						synced: true
					};
				});

			});
		}
		return sync;
	}
	return exports;
}


if (require.main === module) {

	const PATH = require("path");

	var filename = process.argv[2] || "./" + PATH.basename(API.env.CWD);

	// Establish container environment for the module.

	const API = {
		EXTEND: require("extend"),
		PATH: PATH,
		FS: require("fs"),
		EXEC: require("child_process").exec,
		SPAWN: require("child_process").spawn,
		Q: require("q"),
		QFS: require("q-io/fs"),
		SM_EXPAND: require("sm.expand").api({
			filename: filename
		}),
		env: {
			VERBOSE: process.env.VERBOSE,
			BO_GLOBAL_SYSTEM_CACHE_DIR: process.env.BO_GLOBAL_SYSTEM_CACHE_DIR,
			CWD: process.cwd()
		}
	};

	API.EXTEND(false, API, {
		CONFIG: require("pinf.logic-for-json").for(API),
		GIT_PULL: require("smi-for-git/api/pull-latest").for(API).PLFunction,
		GIT_EXPORT: require("smi-for-git/api/export-to").for(API).PLFunction
	});

	var api = exports.for(API);

	API.Q.when(api.for({
		filename: filename
	})()).then(function (info) {
		if (info.expanded) {
			process.exit(0);
		} else {
			process.exit(1);
		}
	}).fail(function (err) {
		console.error("ERROR:", err.stack || err);
		process.exit(1);
	});
}
